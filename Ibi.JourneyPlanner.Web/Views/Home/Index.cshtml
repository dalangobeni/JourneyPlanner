@{
    ViewBag.Title = "Index";
}

@section css {
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.5/leaflet.css" />
     <!--[if lte IE 8]>
         <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.5/leaflet.ie.css" />
     <![endif]-->
    
    <style>
        #map {
            height: 560px;
        }
    </style>
}

@section scripts {
    <script src="http://cdn.leafletjs.com/leaflet-0.5/leaflet.js"></script>
    <script>

        function onEachFeature(feature, layer) {
            if (feature.properties) {
                var distance = feature.properties.distance;
                var journeyTimeSeconds = feature.properties.journeytime;
                
                layer.bindPopup("Distance: " + distance + "<br />Time: " + journeyTimeSeconds);
            }

            if (feature.properties && feature.properties.name) {
                layer.bindPopup(feature.properties.name);
            }
        }

        function getRequestUrl(perPage, pageNumber) {
            // var url = "http://api.citysdk.waag.org/admr.uk.gr.manchester/nodes?geom&osm::amenity=parking&per_page=" + perPage;
            var url = "http://api.citysdk.waag.org/admr.uk.gr.manchester/ptstops?geom&osm::amenity=parking&per_page=" + perPage;
            if (pageNumber) {
                url += "&page=" + pageNumber;
            }

            return url;
        }

        function resolvePoint(point, callback) {
            var request = $.ajax({
                type: "POST",
                url: "/api/Routing/GetClosestPointTo",
                data: point,
                dataType: "JSON"
            });

            request.success(function(response) {
                if (callback) {
                    callback(response);
                }
            });
        }

        function routePoint(points) {

            var request = $.ajax({
                type: "POST",
                url: "/api/Routing/PointToPoint",
                data: points,
                dataType: "JSON"
            });

            request.success(function(response) {
                if (response && response.results) {
                    for (var i = response.results.length - 1; i >= 0; i--) {
                        var thisItem = response.results[i];

                        var geojsonFeature = {
                            "type": "Feature",
                            "properties": {
                                "name": thisItem.name
                            },
                            "geometry": {
                                "type": thisItem.geom.type,
                                "coordinates": thisItem.geom.coordinates
                            }
                        };

                        var myStyle = {
                            "color": "#ff7800",
                            "weight": 5,
                            "opacity": 1
                        };

                        L.geoJson(geojsonFeature, {
                            style: myStyle,
                            onEachFeature: onEachFeature
                        }).addTo(map);
                    }
                }
            });
        }

        // create a map in the "map" div, set the view to a given place and zoom
        var map = L.map('map').setView([53.4791, -2.2457], 13);

        // add an OpenStreetMap tile layer
        L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors. Built by Mark & Kev.'
        }).addTo(map);

        var routingPoints = [];

        function onMapClick(e) {
            var clickedPosition = e.latlng;

            resolvePoint({ latitude: clickedPosition.lat, longitude: clickedPosition.lng }, function (point) {

                var position = { lat: point.Latitude, lng: point.Longitude };
                L.marker(position).addTo(map);

                if (routingPoints.length == 0) {
                    routingPoints.push(position);
                } else {
                    routingPoints.push(position);

                    var from = routingPoints[0];
                    var to = routingPoints[1];

                    routePoint({
                        fromLatitude: from.lat,
                        fromLongitude: from.lng,
                        toLatitude: to.lat,
                        toLongitude: to.lng,
                    });

                    routingPoints = [];
                }
            });            
        }

        map.on('contextmenu', onMapClick);
    </script>
}

    <h1>API Tests</h1>

    <div id="map"></div>